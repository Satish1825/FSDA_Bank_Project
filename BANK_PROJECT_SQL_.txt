use database BANK


CREATE TABLE DISTRICT(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities	INT,
Ratio_of_urban_inhabitants	FLOAT,
Average_salary	INT,
No_of_entrepreneurs_per_1000_inhabitants	INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
) ;



create table ACCOUNT (
account_id int PRIMARY KEY,
district_id int,
frequency varchar(30),
account_type varchar(30),
`date` date,
card_assigned varchar(30),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);



CREATE TABLE `ORDER`(
order_id	INT PRIMARY KEY,
account_id	INT,
bank_to	VARCHAR(45),
account_to	INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE TABLE LOAN(
loan_id	INT ,
account_id	INT,
`Date`	DATE,
amount	INT,
duration	INT,
payments	INT,
`status` VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);


CREATE TABLE TRANSACTIONS(
trans_id INT,	
account_id	INT,
`Date`	DATE,
`Type`	VARCHAR(30),
operation	VARCHAR(40),
amount	INT,
balance	FLOAT,
Purpose	VARCHAR(40),
bank	VARCHAR(45),
`account` INT,
FOREIGN KEY (account_id) references ACCOUNT(account_id));


CREATE TABLE CLIENT(
client_id	INT PRIMARY KEY,
Sex	CHAR(10),
Birth_date	DATE,
district_id INT,
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);


CREATE TABLE DISPOSITION(
disp_id	INT PRIMARY KEY,
client_id INT,
account_id	INT,
`type` CHAR(15),
FOREIGN KEY (account_id) references ACCOUNT(account_id),
FOREIGN KEY (client_id) references CLIENT(client_id)
);


CREATE TABLE CARD(
card_id	INT PRIMARY KEY,
disp_id	INT,
`type` CHAR(10)	,
issued DATE,
FOREIGN KEY (disp_id) references DISPOSITION(disp_id)
)

CREATE OR REPLACE STORAGE INTEGRATION S3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE 
STORAGE_AWS_ROLE_ARN ="arn:aws:iam::967821607229:role/bankrole"
STORAGE_ALLOWED_LOCATIONS =("s3://finalproject250/");

DESC INTEGRATION S3_int;

CREATE FILE FORMAT my_csv_format
  TYPE = 'CSV'
  FIELD_DELIMITER = ','
  SKIP_HEADER = 1
  NULL_IF = ('NULL');


CREATE OR REPLACE STAGE BANK
URL = 's3://finalproject250'
file_format =my_csv_format
storage_integration = S3_int;

LIST @BANK

SHOW STAGES;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISTRICT"
FROM '@BANK/District/'
FILE_FORMAT = my_csv_format


CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."ACCOUNT"
FROM '@BANK/Account/'
FILE_FORMAT = my_csv_format


CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."`ORDER`"
FROM '@BANK/Order/'
FILE_FORMAT = my_csv_format


CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."LOAN"
FROM '@BANK/Loan/'
FILE_FORMAT = my_csv_format

CREATE OR REPLACE PIPE BANK_SNOWPIPE_TRANSACTIONS AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."TRANSACTIONS"
FROM '@BANK/Trnx/'
FILE_FORMAT = my_csv_format

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CLIENT"
FROM '@BANK/Client/'
FILE_FORMAT = my_csv_format


CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISPOSITION AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISPOSITION"
FROM '@BANK/Disp/'
FILE_FORMAT = my_csv_format

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CARD"
FROM '@BANK/Card/'
FILE_FORMAT = my_csv_format

SHOW PIPES;

SELECT COUNT(*) FROM DISTRICT
SELECT COUNT(*) FROM ACCOUNT
SELECT COUNT(*) FROM `ORDER`
SELECT COUNT(*) FROM LOAN
SELECT COUNT(*) FROM TRANSACTIONS
SELECT COUNT(*) FROM DISPOSITION
SELECT COUNT(*) FROM CARD
SELECT COUNT(*) FROM CLIENT

SELECT * FROM DISTRICT

ALTER PIPE BANK_SNOWPIPE_DISTRICT REFRESH;

ALTER PIPE BANK_SNOWPIPE_ACCOUNT REFRESH;

ALTER PIPE BANK_SNOWPIPE_ORDER REFRESH;

ALTER PIPE BANK_SNOWPIPE_LOAN REFRESH;

ALTER PIPE BANK_SNOWPIPE_TRANSACTIONS REFRESH;

ALTER PIPE BANK_SNOWPIPE_CARD REFRESH;

ALTER PIPE BANK_SNOWPIPE_CLIENT REFRESH;

select * from TRANSACTIONS


SELECT * FROM CLIENT

ALTER TABLE CLIENT
ADD COLUMN AGE INT;

UPDATE CLIENT
SET AGE = DATEDIFF('YEAR',BIRTH_DATE,'2022-12-19');

SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND `DATE` = '2016'

SELECT YEAR(`DATE`) AS TXN_YEAR, COUNT(*) AS TOT_TXNS
FROM TRANSACTIONS
WHERE BANK IS NULL
GROUP BY 1
ORDER BY 2 DESC;


UPDATE TRANSACTIONS
SET `DATE` = DATEADD(YEAR ,1 ,`DATE`)
WHERE YEAR(`DATE`) = 2021

UPDATE TRANSACTIONS
SET `DATE` = DATEADD(YEAR ,1 ,`DATE`)
WHERE YEAR(`DATE`) = 2019

UPDATE TRANSACTIONS
SET `DATE` = DATEADD(YEAR ,1 ,`DATE`)
WHERE YEAR(`DATE`) = 2018

UPDATE TRANSACTIONS
SET `DATE` = DATEADD(YEAR ,1 ,`DATE`)
WHERE YEAR(`DATE`) = 2017

UPDATE TRANSACTIONS
SET `DATE` = DATEADD(YEAR ,1 ,`DATE`)
WHERE YEAR(`DATE`) = 2016

UPDATE TRANSACTIONS
SET `DATE` = DATEADD(YEAR ,1 ,`DATE`)
WHERE YEAR(`DATE`) = 2020

SELECT MIN("`DATE`"),MAX("`DATE`") FROM TRANSACTIONS;

select * from transactions where BANK IS NULL AND  year(`date`)= 2020

select * from transactions

UPDATE TRANSACTIONS
SET BANK = 'Sky Bank' where BANK IS NULL AND YEAR("`DATE`") = 2022;

UPDATE TRANSACTIONS
SET BANK = 'DBS Bank' where BANK IS NULL AND YEAR("`DATE`") = 2021;

UPDATE TRANSACTIONS
SET BANK = 'ADB Bank' where BANK IS NULL AND YEAR("`DATE`") = 2020;


UPDATE TRANSACTIONS
SET BANK = 'Northern Bank' where BANK IS NULL AND YEAR("`DATE`") = 2019;

UPDATE TRANSACTIONS
SET BANK = 'Southern Bank' where BANK IS NULL AND YEAR("`DATE`") = 2018;

select * from transactions where BANK IS NULL

SELECT COUNT(*) FROM CARD 
SELECT * FROM CARD 

SELECT DISTINCT YEAR(ISSUED) FROM CARD 

SELECT DISTINCT YEAR("`DATE`") FROM ACCOUNT

SELECT * FROM LOAN

SELECT 
SUM(CASE WHEN SEX = 'Male' THEN 1 END) AS MALE_CLIENT ,
SUM(CASE WHEN SEX = 'Female' THEN 1 END) AS FEMALE_CLIENT 
FROM CLIENT ;


SELECT 
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END)/COUNT(*)*100.0 AS MALE_PERC ,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END)/COUNT(*)*100.0 AS FEMALE_PERC 
FROM CLIENT ;



create or replace table czec_demographic_data_kpi as
SELECT  C.DISTRICT_ID,D.DISTRICT_NAME,D.AVERAGE_SALARY,
ROUND(AVG(C.AGE),0) AS AVG_AGE,
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS MALE_CLIENT ,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) AS FEMALE_CLIENT ,
ROUND((FEMALE_CLIENT/MALE_CLIENT)*100,2) AS MALE_FEMALE_RATIO_PERC,
COUNT(*)AS TOTAL_CLIENT
FROM CLIENT C
INNER JOIN DISTRICT D ON C.DISTRICT_ID = D.DISTRICT_CODE
GROUP BY 1,2,3
ORDER BY 1;

SELECT * FROM czec_demographic_data_kpi


CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS
SELECT LTD.*,TXN.BALANCE
FROM TRANSACTIONS AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR("`DATE`") AS TXN_YEAR,
   MONTH("`DATE`") AS TXN_MONTH,
   MAX("`DATE`") AS LATEST_TXN_DATE
   FROM TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN."`DATE`" = LTD.LATEST_TXN_DATE
WHERE TXN."`TYPE`" = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH;


select * from ACC_LATEST_TXNS_WITH_BALANCE;







CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT  ALWB.TXN_YEAR , ALWB.TXN_MONTH,T.BANK,A.ACCOUNT_TYPE,

COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T."`TYPE`" = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T."`TYPE`" = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALWB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC ,
NVL(TOT_BALANCE / TOT_ACCOUNT,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM TRANSACTIONS AS T
INNER JOIN  ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;




SELECT LATEST_TXN_DATE,COUNT(*) AS TOT_TXNS
FROM ACC_LATEST_TXNS_WITH_BALANCE
GROUP BY 1
ORDER BY 2 DESC;


select TXN_YEAR,COUNT(*) AS TOTAL
FROM BANKING_KPI
GROUP BY 1
ORDER BY 2 DESC;
----

SELECT * FROM BANKING_KPI
ORDER BY txn_year,BANK;
-----
SELECT * FROM TRANSACTIONS

WHERE ACCOUNT_ID = 1
ORDER BY "`DATE`";
-------
SELECT * FROM BANKING_KPI
where txn_year =2019;
-------
select TXN_YEAR AS TXN_YEAR,BANK,
SUM(AVG_BALANCE) AS TOT_AVG_BALANCE

from BANKING_KPI
GROUP BY 1,2
ORDER BY TOT_AVG_BALANCE DESC;
-----------
SELECT * FROM TRANSACTIONS
WHERE BANK = 'Sky Bank' AND ACCOUNT_ID = 7745
ORDER BY "`DATE`" ,BANK;
-------
SELECT * FROM TRANSACTIONS
WHERE ACCOUNT_ID = 1 AND YEAR("`DATE`") = 2019 AND MONTH("`DATE`") = 7;

----------------


SELECT * FROM ACC_LATEST_TXNS_WITH_BALANCE ;

select * from loan;
---------
SELECT DISTINCT "`STATUS`",SUM(AMOUNT)
FROM LOAN
GROUP BY 1
ORDER BY 1;
